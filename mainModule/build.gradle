apply plugin: 'com.android.application'

def cfg = rootProject.ext.android
def appId = rootProject.ext.appId
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("keystore.properties")
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        config {
            v1SigningEnabled true
            v2SigningEnabled true
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }


    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
    compileSdkVersion cfg.compileSdkVersion
    buildToolsVersion cfg.buildToolsVersion
    dexOptions {
        jumboMode = true
    }

    defaultConfig {
        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86", "mips"
        }
        multiDexEnabled true
        applicationId appId["app"]
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode//更新次数
        versionName cfg.versionName//版本号
        //resourcePrefix "app_"

    }

    lintOptions {


        checkReleaseBuilds false
        abortOnError false
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        debug {
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
}

//编译期组件隔离，运行期组件按需依赖
//mainModule需要跟cartModule,goodsModule,usersModule进行交互，所以在运行期添加了依赖
def tasks = project.gradle.startParameter.taskNames
for (String task : tasks) {
    def upperName = task.toUpperCase()
    if (!isModuleRun.toBoolean()) {
        if (upperName.contains("ASSEMBLE") || upperName.contains("INSTALL")) {
            dependencies.add("compile", project.project(':' + 'cartmodule'))
            dependencies.add("compile", project.project(':' + 'goodsmodule'))
            dependencies.add("compile", project.project(':' + 'usermodule'))
            dependencies.add("compile", project.project(':' + 'ordermodule'))
        }
    }


}




dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':routermodule')

}

